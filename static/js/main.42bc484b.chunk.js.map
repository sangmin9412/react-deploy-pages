{"version":3,"sources":["Components/Movie.js","Components/MovieComponent.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","props","className","src","poster","Movie","key","index","title","genres","synopsis","MovieComponent","useState","movies","setMovies","loadMovies","setLoadMovies","pageCount","setPageCount","moviesLoading","useRef","useEffect","_loadMovies","document","body","classList","add","onScroll","a","scrollY","window","pageYOffset","windowHeight","documentElement","offsetHeight","documentHeight","clientHeight","current","console","log","_callApi","movie","prev","setTimeout","addEventListener","removeEventListener","limit","page","fetch","then","response","json","data","catch","err","map","medium_cover_image","Profile","About","App","to","path","exact","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.42bc484b.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie(props) {\r\n    return (\r\n        <div className=\"movie-item\" key={props.index}>\r\n            <div className=\"movie-item-inner\">\r\n                <MoviePoster poster={props.poster} />\r\n                <div className=\"movie-item-info\">\r\n                    <p className=\"movie-item-tit\">{props.title}</p>\r\n                    <p className=\"movie-item-genres\">{props.genres}</p>\r\n                    <p className=\"movie-item-synopsis\">{props.synopsis}</p>\r\n                </div>\r\n                <div className=\"movie-item-likes\">likes...</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster(props) {\r\n    return (\r\n        <div className=\"img\"><img src={props.poster} /></div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Movie from './Movie'\r\n\r\nfunction MovieComponent() {\r\n    const [movies, setMovies] = useState([])\r\n    const [loadMovies, setLoadMovies] = useState(false)\r\n    const [pageCount, setPageCount] = useState(2);\r\n    const moviesLoading = useRef(false);\r\n\r\n    useEffect(() => {\r\n      _loadMovies()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (loadMovies) {\r\n          document.body.classList.add('onloaded')\r\n        }\r\n    }, [loadMovies]);\r\n\r\n    useEffect(() => {\r\n      async function onScroll() {\r\n        let scrollY = window.pageYOffset;\r\n        let windowHeight = document.documentElement.offsetHeight;\r\n        let documentHeight = document.documentElement.clientHeight;\r\n        if (scrollY + documentHeight > windowHeight - 800) {\r\n          if (!moviesLoading.current) {\r\n            console.log('moviessss');\r\n            moviesLoading.current = true;\r\n            const movie = await _callApi(20, pageCount)\r\n            setMovies((prev) => {\r\n              return [\r\n                ...prev,\r\n                ...movie,\r\n              ]\r\n            });\r\n            console.log(movies);\r\n\r\n            setTimeout(() => {\r\n              moviesLoading.current = false;\r\n              setPageCount((prev) => prev + 1);\r\n            }, 1500);\r\n          }\r\n        }\r\n      }\r\n      document.addEventListener('scroll', onScroll);\r\n      return () => {\r\n        document.removeEventListener('scroll', onScroll);\r\n      }\r\n    }, [movies, moviesLoading, pageCount]);\r\n\r\n    const _loadMovies = async () => {\r\n        const movies = await _callApi(20, 1)\r\n        setMovies(movies)\r\n        setLoadMovies(true);\r\n\r\n        console.log(movies)\r\n    }\r\n\r\n    const _callApi = (limit, page) => {\r\n        return (\r\n            fetch(`https://yts.mx/api/v2/list_movies.json?sort_by=like_count&limit=${limit}&page=${page}`)\r\n            .then((response) => {return response.json()})\r\n            .then((json) => {return json.data.movies})\r\n            .catch((err) => {console.log(err)})\r\n        )\r\n    }\r\n\r\n    const _renderMovies = () => {\r\n        return (\r\n            movies.map((movie, index) => {\r\n              return (\r\n                <Movie \r\n                  title={movie.title}  \r\n                  poster={movie.medium_cover_image} \r\n                  key={index} \r\n                  genres={movie.genres}\r\n                  synopsis={movie.synopsis}\r\n                />\r\n              )\r\n            })\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div className=\"movie-list\">\r\n            <div className=\"movie-list-inner\">\r\n                {movies ? _renderMovies() : \"Loading...\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieComponent;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport \"./App.css\";\r\nimport MovieComponent from './Components/MovieComponent'\r\n\r\nfunction Profile() {\r\n  return (\r\n    <div>\r\n      Profile Test\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      About Test\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n      <div>\r\n        <Link to=\"/react-study/\">Home</Link>\r\n        <Link to=\"/react-study/about\">About</Link>\r\n        <Link to=\"/react-study/profile\">Profile</Link>\r\n      </div>\r\n      <div>\r\n        <Route path=\"/react-study/about\" exact>\r\n          <About />\r\n        </Route>\r\n        <Route path=\"/react-study/profile\" exact>\r\n          <Profile />\r\n        </Route>\r\n        <Route path=\"/react-study/\" exact>\r\n          <MovieComponent />\r\n        </Route>\r\n      </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9';\r\nimport 'react-app-polyfill/ie11';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}