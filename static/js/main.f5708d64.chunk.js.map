{"version":3,"sources":["Movie.js","Count.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","props","className","poster","Movie","title","Count","useState","count","setCount","onClick","alert","App","movies","setMovies","setTimeout","map","movie","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAYA,SAASA,EAAYC,GACjB,OACI,yBAAKC,UAAU,OAAOD,EAAME,QAIrBC,MAff,SAAeH,GACX,OACI,6BACI,kBAACD,EAAD,CAAaG,OAAQF,EAAME,SAC3B,uBAAGD,UAAU,OAAOD,EAAMI,SCcvBC,MAnBf,WAAkB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,KAWb,OACI,6BACI,oCAAUD,EAAV,KACA,4BAAQE,QAXW,WACpBF,GAAS,GACRG,MAAM,WAGVF,EAASD,EAAQ,KAMb,eCmDGI,MA/Df,WAAgB,IAAD,EAEeL,mBAAS,CACnC,CACEF,MAAO,wBACPF,OAAQ,yBAEV,CACEE,MAAO,wBACPF,OAAQ,yBAEV,CACEE,MAAO,wBACPF,OAAQ,yBAEV,CACEE,MAAO,wBACPF,OAAQ,yBAEV,CACEE,MAAO,wBACPF,OAAQ,2BArBC,mBAENU,EAFM,KAEEC,EAFF,KAkDb,OAzBAC,YAAW,WACTD,EAAU,CACR,CACET,MAAO,qCACPF,OAAQ,sCAEV,CACEE,MAAO,qCACPF,OAAQ,sCAEV,CACEE,MAAO,qCACPF,OAAQ,sCAEV,CACEE,MAAO,qCACPF,OAAQ,sCAEV,CACEE,MAAO,qCACPF,OAAQ,0CAGX,KAGD,yBAAKD,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,6BACA,6BACCW,EAAOG,KAAI,SAACC,EAAOC,GAClB,OAAO,kBAAC,EAAD,CAAOb,MAAOY,EAAMZ,MAAOF,OAAQc,EAAMd,OAAQgB,IAAKD,SCjDjDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f5708d64.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie(props) {\r\n    return (\r\n        <div>\r\n            <MoviePoster poster={props.poster} />\r\n            <p className=\"tit\">{props.title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction MoviePoster(props) {\r\n    return (\r\n        <div className=\"img\">{props.poster}</div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React, { useState } from 'react';\r\n\r\nfunction Count() {\r\n    const [count, setCount] = useState(0);\r\n\r\n    const countButtonHandler = () => {\r\n        if(count >= 15){\r\n            alert('15 Up!!');\r\n            return\r\n        }\r\n        setCount(count + 1);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>Items {count}.</p>\r\n            <button onClick={countButtonHandler}>Click Me!</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Count;","import React, { useState } from 'react';\nimport Movie from './Movie'\nimport Count from './Count'\n\nfunction App() {\n\n  const [movies, setMovies] = useState([\n    {\n      title: \"타이틀 01\",\n      poster: \"이미지 01\"\n    },\n    {\n      title: \"타이틀 02\",\n      poster: \"이미지 02\"\n    },\n    {\n      title: \"타이틀 03\",\n      poster: \"이미지 03\"\n    },\n    {\n      title: \"타이틀 04\",\n      poster: \"이미지 04\"\n    },\n    {\n      title: \"타이틀 05\",\n      poster: \"이미지 05\"\n    }\n  ]);\n\n  setTimeout(function(){\n    setMovies([\n      {\n        title: \"리셋 타이틀 01\",\n        poster: \"리셋 이미지 01\"\n      },\n      {\n        title: \"리셋 타이틀 02\",\n        poster: \"리셋 이미지 02\"\n      },\n      {\n        title: \"리셋 타이틀 03\",\n        poster: \"리셋 이미지 03\"\n      },\n      {\n        title: \"리셋 타이틀 04\",\n        poster: \"리셋 이미지 04\"\n      },\n      {\n        title: \"리셋 타이틀 05\",\n        poster: \"리셋 이미지 05\"\n      }\n    ]);\n  }, 3000);\n\n  return (\n    <div className=\"App\">\n      <Count />\n      <br />\n      <hr />\n      <br />\n      {movies.map((movie, index) => {\n        return <Movie title={movie.title} poster={movie.poster} key={index} />\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}