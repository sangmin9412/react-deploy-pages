{"version":3,"sources":["Components/Movie.js","Components/MovieComponent.js","Count.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","props","className","src","poster","Movie","key","index","title","genres","synopsis","MovieComponent","useEffect","_getMovies","useState","movies","setMovies","a","_callApi","console","log","fetch","then","response","json","data","catch","err","map","movie","medium_cover_image","Count","count","setCount","onClick","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oRAmBA,SAASA,EAAYC,GACjB,OACI,yBAAKC,UAAU,OAAM,yBAAKC,IAAKF,EAAMG,UAI9BC,MAtBf,SAAeJ,GACX,OACI,yBAAKC,UAAU,aAAaI,IAAKL,EAAMM,OACnC,yBAAKL,UAAU,oBACX,kBAACF,EAAD,CAAaI,OAAQH,EAAMG,SAC3B,yBAAKF,UAAU,mBACX,uBAAGA,UAAU,kBAAkBD,EAAMO,OACrC,uBAAGN,UAAU,qBAAqBD,EAAMQ,QACxC,uBAAGP,UAAU,uBAAuBD,EAAMS,WAE9C,yBAAKR,UAAU,oBAAf,eCsCDS,MAhDf,WACIC,qBAAU,WAINC,MACD,IANmB,MAOMC,mBAAS,IAPf,mBAOfC,EAPe,KAOPC,EAPO,KAShBH,EAAU,uCAAG,4BAAAI,EAAA,sEACMC,IADN,OACTH,EADS,OAEfC,EAAUD,GAEVI,QAAQC,IAAIL,GAJG,2CAAH,qDAOVG,EAAW,WACb,OACIG,MAAM,6DACLC,MAAK,SAACC,GAAc,OAAOA,EAASC,UACpCF,MAAK,SAACE,GAAU,OAAOA,EAAKC,KAAKV,UACjCW,OAAM,SAACC,GAASR,QAAQC,IAAIO,OAkBrC,OACI,yBAAKzB,UAAU,cACX,yBAAKA,UAAU,oBACVa,EAfLA,EAAOa,KAAI,SAACC,EAAOtB,GACnB,OAAO,kBAAC,EAAD,CACPC,MAAOqB,EAAMrB,MACbJ,OAAQyB,EAAMC,mBACdxB,IAAKC,EACLE,OAAQoB,EAAMpB,OACdC,SAAUmB,EAAMnB,cASgB,gBCxB7BqB,MAnBf,WAAkB,IAAD,EACajB,mBAAS,GADtB,mBACNkB,EADM,KACCC,EADD,KAWb,OACI,6BACI,qCAAWD,EAAX,MACA,4BAAQE,QAXW,WACpBF,GAAS,GACRG,MAAM,WAGVF,EAASD,EAAQ,KAMb,eCCGI,MAZf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,6BACA,6BACA,kBAAC,EAAD,QCAcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.4a58635f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie(props) {\r\n    return (\r\n        <div className=\"movie-item\" key={props.index}>\r\n            <div className=\"movie-item-inner\">\r\n                <MoviePoster poster={props.poster} />\r\n                <div className=\"movie-item-info\">\r\n                    <p className=\"movie-item-tit\">{props.title}</p>\r\n                    <p className=\"movie-item-genres\">{props.genres}</p>\r\n                    <p className=\"movie-item-synopsis\">{props.synopsis}</p>\r\n                </div>\r\n                <div className=\"movie-item-likes\">likes...</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster(props) {\r\n    return (\r\n        <div className=\"img\"><img src={props.poster} /></div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React, { useState, useEffect } from 'react';\r\nimport Movie from './Movie'\r\n\r\nfunction MovieComponent() {\r\n    useEffect(() => {\r\n        // setTimeout(function(){\r\n        //   setMovies(setData);\r\n        // }, 3000);\r\n        _getMovies()\r\n    }, [])\r\n    const [movies, setMovies] = useState([])\r\n\r\n    const _getMovies = async () => {\r\n        const movies = await _callApi()\r\n        setMovies(movies)\r\n\r\n        console.log(movies)\r\n    }\r\n\r\n    const _callApi = () => {\r\n        return (\r\n            fetch('https://yts.mx/api/v2/list_movies.json?sort_by=like_count')\r\n            .then((response) => {return response.json()})\r\n            .then((json) => {return json.data.movies})\r\n            .catch((err) => {console.log(err)})\r\n        )\r\n    }\r\n\r\n    const _renderMovies = () => {\r\n        return (\r\n            movies.map((movie, index) => {\r\n            return <Movie \r\n            title={movie.title}  \r\n            poster={movie.medium_cover_image} \r\n            key={index} \r\n            genres={movie.genres}\r\n            synopsis={movie.synopsis}\r\n            />\r\n            })\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div className=\"movie-list\">\r\n            <div className=\"movie-list-inner\">\r\n                {movies ? _renderMovies() : \"Loading...\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieComponent;","import React, { useState } from 'react';\r\n\r\nfunction Count() {\r\n    const [count, setCount] = useState(0);\r\n\r\n    const countButtonHandler = () => {\r\n        if(count >= 15){\r\n            alert('15 Up!!');\r\n            return\r\n        }\r\n        setCount(count + 1);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>Items [{count}].</p>\r\n            <button onClick={countButtonHandler}>Click Me!</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Count;","import React from 'react';\nimport \"./App.css\";\nimport MovieComponent from './Components/MovieComponent'\nimport Count from './Count'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Count />\n      <br />\n      <hr />\n      <br />\n      <MovieComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}